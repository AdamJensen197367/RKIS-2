name: Check

on:
  workflow_dispatch:
  pull_request:
    branches: ["master"]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 6.0.x

      - name: Build and restore all projects with error annotations
        continue-on-error: true
        run: |
          build_failed=false
          mapfile -t projects < <(find ./Занятие\ 1 -name '*.csproj')

          for project in "${projects[@]}"; do
            echo "Restoring dependencies for project: \"$project\""
            dotnet restore "$project"

            echo "Building project: \"$project\""
            build_output=$(dotnet build "$project" --no-restore || true)

            if [[ $build_output == *"error"* ]]; then
              build_failed=true
            fi

            echo "$build_output" | awk '!seen[$0]++' | while read -r line; do
              if [[ "$line" =~ ^(.*[a-zA-Z0-9_/.]+)\(([0-9]+),([0-9]+)\):\ error\ (.*)$ ]]; then
                file="${BASH_REMATCH[1]}"
                line_number="${BASH_REMATCH[2]}"
                column_number="${BASH_REMATCH[3]}"
                error_message="${BASH_REMATCH[4]}"
                echo "::error file=$file,line=$line_number,col=$column_number::$error_message"
              fi
            done
          done
          echo "build_failed=$build_failed" >> $GITHUB_ENV
          echo "$build_failed"

      - name: Run tests and report failures
        run: |
          # Массив для всех проектов
          mapfile -t test_projects < <(find ./Занятие\ 1 -name '*.csproj')
      
          # Выполнение тестов для каждого проекта
          test_failed=false
          for test_project in "${test_projects[@]}"; do
            echo "Running tests for: \"$test_project\""
      
            # Запуск тестов и сохранение вывода
            test_output=$(dotnet test "$test_project" --no-restore --no-build)
      
            # Проверка на наличие неудачных тестов в выводе
            if echo "$test_output" | grep -q "Failed"; then
              test_failed=true
              echo "Test failures found for $test_project"
      
              # Извлекаем неудачные тесты и их сообщения
              echo "$test_output" | grep -E '(\[.*\] .*)' | while read -r line; do
                # Это регулярное выражение для извлечения информации о тесте
                if [[ "$line" =~ (.*) ]]; then
                  test_name="${BASH_REMATCH[1]}"
                  # Аннотируем ошибку в GitHub Actions с ссылкой на тест
                  echo "::error file=$test_project::$test_name failed"
                fi
              done
            fi
          done
      
          if [ "$test_failed" = true ]; then
            echo "Tests failed. See errors above."
            exit 1
          fi

      - name: Final Check
        run: |
          if [[ "$build_failed" == "true" ]]; then
            echo "Build failed due to errors in the projects."
            exit 1
          elif [[ "$test_failed" == "true" ]]; then
            echo "Some tests have failed. The workflow will now fail."
            exit 1
          else
            echo "Build and tests completed successfully without errors."
          fi
