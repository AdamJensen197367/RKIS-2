name: Check

on:
  workflow_dispatch:
  pull_request:
    branches: ["master"]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 6.0.x

      - name: Build all projects
        continue-on-error: true
        run: |
          build_failed=false
          mapfile -t projects < <(find ./–ó–∞–Ω—è—Ç–∏–µ\ 1 -name '*.csproj')

          for project in "${projects[@]}"; do
            echo "üîπ Restoring dependencies: \"$project\""
            dotnet restore "$project"

            echo "üõ†Ô∏è Building: \"$project\""
            build_output=$(dotnet build "$project" --no-restore || true)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –≤ –±–∏–ª–¥–µ
            if [[ $build_output == *"error"* ]]; then
              build_failed=true
            fi

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –∏ —Å–æ–∑–¥–∞–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
            echo "$build_output" | awk '!seen[$0]++' | while read -r line; do
              if [[ "$line" =~ ^(.*[a-zA-Z0-9_/.]+)\(([0-9]+),([0-9]+)\):\ error\ (.*)$ ]]; then
                file="${BASH_REMATCH[1]}"
                line_number="${BASH_REMATCH[2]}"
                column_number="${BASH_REMATCH[3]}"
                error_message="${BASH_REMATCH[4]}"
                echo "::error file=$file,line=$line_number,col=$column_number::$error_message"
              fi
            done
          done

          echo "build_failed=$build_failed" >> $GITHUB_ENV

      - name: Test all projects
        continue-on-error: true
        run: |
          test_failed=false
          mapfile -t test_projects < <(find ./–ó–∞–Ω—è—Ç–∏–µ\ 1 -name '*.csproj')

          for test_project in "${test_projects[@]}"; do
            echo "üß™ Running tests: \"$test_project\""
            
            test_output=$(dotnet test "$test_project" --no-restore --no-build --logger "console;verbosity=detailed" 2>&1 | tee test_results.log)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É–ø–∞–≤—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
            if grep -q "Failed!" test_results.log; then
              test_failed=true

              # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —É–ø–∞–≤—à–∏–º–∏ —Ç–µ—Å—Ç–∞–º–∏ –∏ –≤—ã–≤–æ–¥–∏–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
              grep -E "^\s*Failed\s" test_results.log | while read -r line; do
                test_name=$(echo "$line" | awk '{print $2}')
                echo "::error title=Test failed::$test_name"
              done

              # –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–µ –æ—à–∏–±–∫–∏ —Ç–µ—Å—Ç–æ–≤
              echo "üî¥ Test failures detected:"
              grep -E "^\s*Error Message:" -A3 test_results.log || true
            fi
          done

          echo "test_failed=$test_failed" >> $GITHUB_ENV

      - name: Final Check
        run: |
          if [[ "$build_failed" == "true" ]]; then
            echo "‚ùå Build failed."
            exit 1
          elif [[ "$test_failed" == "true" ]]; then
            echo "‚ùå Tests failed."
            exit 1
          else
            echo "‚úÖ Build and tests completed successfully!"
          fi

