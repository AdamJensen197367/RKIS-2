name: Check

on:
  workflow_dispatch:
  pull_request:
    branches: ["master"]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 6.0.x
      - name: Build and restore all projects with error annotations
        continue-on-error: true
        run: |
          build_failed=false

          mapfile -t projects < <(find ./Занятие\ 1 ./Занятие\ 2 ./Занятие\ 3 ./Занятие\ 4 -name '*.csproj')

          for project in "${projects[@]}"; do
            echo "Restoring dependencies for project: \"$project\""
            dotnet restore "$project"

            echo "Building project: \"$project\""
            build_output=$(dotnet build "$project" --no-restore  || true)

            if [[ $build_output == *"error"* ]]; then
              build_failed=true
            fi

            echo "$build_output"| awk '!seen[$0]++' | while read -r line; do
              if [[ "$line" =~ ^(.*[a-zA-Z0-9_/.]+)\(([0-9]+),([0-9]+)\):\ error\ (.*)$ ]]; then
                file="${BASH_REMATCH[1]}"
                line_number="${BASH_REMATCH[2]}"
                column_number="${BASH_REMATCH[3]}"
                error_message="${BASH_REMATCH[4]}"
                echo "::error file=$file,line=$line_number,col=$column_number::$error_message"
              fi
            done
          done
          echo "build_failed=$build_failed" >> $GITHUB_ENV
          echo "$build_failed"

      - name: Check for build errors
        if: env.build_failed == 'true'
        run: |
          echo "Build failed due to errors in the projects."
          exit 1

      - name: Test all projects
        if: env.build_failed == 'false'
        continue-on-error: true
        run: |
          test_failed=false

          mapfile -t test_projects < <(find ./Занятие\ 9 ./Занятие\ 10 ./Занятие\ 11 ./Занятие\ 12 -name '*.csproj' | grep 'Tests')

          for test_project in "${test_projects[@]}"; do
            echo "Running tests for: \"$test_project\""
            test_output=$(dotnet test "$test_project" --no-restore --no-build --logger trx || true)

            if [[ $test_output == *"Failed!"* ]]; then
              test_failed=true
              while IFS= read -r line; do
                if [[ "$line" =~ (.*):\ error:\ (.*) ]]; then
                  echo "::warning file=${BASH_REMATCH[1]}::Test failed - ${BASH_REMATCH[2]}"
                fi
              done <<< "$test_output"
            fi

            echo "$test_output"
          done

          echo "test_failed=$test_failed" >> $GITHUB_ENV

      - name: Success
        if: env.build_failed == 'false'
        run: echo "Build completed successfully without errors."

      - name: Test Warnings Summary
        if: env.test_failed == 'true'
        run: echo "Some tests have failed. Warnings were added to the GitHub Actions log."
